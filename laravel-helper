#!/bin/bash

e() {
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[0;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'

    TXT_COLOR="${!2}"
    echo -e "${TXT_COLOR}$1${NC}"
}

help() {
    echo -e "$(e "### Help ###\n" "YELLOW")"

    echo -e "$(e "d - Target directory (eg: -d /opt/my-laravel)" "YELLOW")"
    echo -e "$(e "u - Update code using git pull (defaults to master branch)" "YELLOW")"
    echo -e "$(e "i - Install dependencies using composer" "YELLOW")"
    echo -e "$(e "c - Cache config files" "YELLOW")"
    echo -e "$(e "r - Fix folder permission / ownership" "YELLOW")"
    echo -e "$(e "f - Refresh laravel instance" "YELLOW")"
    echo -e "$(e "t - Output Laravel log file with specified line number (eg: -t 100 to output last 100 line)" "YELLOW")"
    echo -e "$(e "l - Output Laravel log file and append output as log file grow" "YELLOW")"
    echo -e "$(e "p - Specify PHP version to use temporarily (eg: -p 8.1)" "YELLOW")"

    exit 0
}

check_deploy_dir() {
    if [[ -z "${DEPLOY_DIR}" ]]; then
        read -p "Use current folder $PWD? [y/n] " YN

        if [[ $YN == "y" || $YN == "Y" ]]; then
            DEPLOY_DIR="$PWD"
        else
            echo -e "\nExiting..."
            exit 1
        fi
    fi
}

switch_php_version() {
    if [[ -n "$PHP_VERSION" ]]; then
        echo -e "$(e "Switching to PHP $PHP_VERSION" "YELLOW")"
        PHP_PATH="/usr/bin/php$PHP_VERSION"
        if [[ ! -f "$PHP_PATH" ]]; then
            echo -e "$(e "Error: PHP version $PHP_VERSION is not installed on this system." "RED")"
            exit 1
        fi

        ORIGINAL_PHP=$(update-alternatives --query php | grep Value: | awk '{print $2}' | head -n 1)
        sudo update-alternatives --set php /usr/bin/php$PHP_VERSION
        PHP_CHANGED=true
    fi
}

revert_php_version() {
    if [[ "$PHP_CHANGED" == true ]]; then
        echo -e "$(e "Reverting to original PHP version" "YELLOW")"
        sudo update-alternatives --set php $ORIGINAL_PHP
    fi
}

update() {
    echo -e "$(e "Updating code in $DEPLOY_DIR\n" "YELLOW")"
    git checkout -- .
    git pull
}

install() {
    echo -e "$(e "Installing dependencies\n" "YELLOW")"
    composer install
    php artisan migrate
}

reset() {
    echo -e "$(e "Reset folder permissions\n" "YELLOW")"
    sudo chgrp -R www-data . && sudo chmod -R 775 storage && sudo chmod -R 775 bootstrap/cache
}

refresh() {
    echo -e "$(e "Refresh laravel instance\n" "YELLOW")"
    composer dump-autoload && php artisan cache:clear && php artisan config:clear && php artisan view:clear && php artisan queue:restart
}

cache_config() {
    php artisan config:cache
}

tail_line() {
    echo -e "$(e "Laravel log\n" "YELLOW")"
    FILE="storage/logs/laravel-$(date +%Y-%m-%d).log"
    FILE2="storage/logs/laravel.log"
    if [ -f "$FILE" ]; then
        tail -n "$1" "$FILE"
    elif [ -f "$FILE2" ]; then
        tail -n "$1" $FILE2
    fi
}

tail_follow() {
    echo -e "$(e "Laravel log\n" "YELLOW")"
    FILE="storage/logs/laravel-$(date +%Y-%m-%d).log"
    FILE2="storage/logs/laravel.log"
    if [ -f "$FILE" ]; then
        tail -f "$FILE"
    elif [ -f "$FILE2" ]; then
        tail -f $FILE2
    fi
}

if [[ $# == 0 ]]; then
    help
fi

PHP_CHANGED=false
while getopts "hd:uicrft:lp:" OPTION; do
    case $OPTION in
        h ) help ;;
        d ) DEPLOY_DIR="$OPTARG" ;;
        p ) PHP_VERSION="$OPTARG" ;;
        u ) UPDATE=true ;;
        i ) INSTALL=true ;;
        c ) CACHE_CONFIG=true ;;
        r ) RESET=true ;;
        f ) REFRESH=true ;;
        t ) TAIL_LINES="$OPTARG" ;;
        l ) TAIL_FOLLOW=true ;;
    esac
done

check_deploy_dir
pushd $DEPLOY_DIR

switch_php_version

# Execute tasks based on options
[[ $UPDATE == true ]] && update
[[ $INSTALL == true ]] && install
[[ $CACHE_CONFIG == true ]] && cache_config
[[ $RESET == true ]] && reset
[[ $REFRESH == true ]] && refresh
[[ -n "$TAIL_LINES" ]] && tail_line $TAIL_LINES
[[ $TAIL_FOLLOW == true ]] && tail_follow

popd
revert_php_version